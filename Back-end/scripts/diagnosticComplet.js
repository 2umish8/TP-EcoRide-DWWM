const axios = require("axios");
const mongoose = require("mongoose");
const Review = require("../models/Review");
const connectMongoDB = require("../Config/mongodb.js");

const API_BASE_URL =
    process.env.API_URL ||
    "https://tp-ecoride-dwwm-production.up.railway.app/api";

async function diagnosticComplet() {
    console.log("üîç DIAGNOSTIC COMPLET - Reviews et MongoDB\n");
    console.log("=".repeat(50));

    // 1. V√©rification des variables d'environnement
    console.log("\n1Ô∏è‚É£ V√âRIFICATION DES VARIABLES D'ENVIRONNEMENT");
    console.log("-".repeat(40));

    const mongoUri = process.env.MONGODB_URI;
    if (mongoUri) {
        console.log("‚úÖ MONGODB_URI d√©finie");
        if (mongoUri.includes("railway") || mongoUri.includes("mongodb.net")) {
            console.log("‚úÖ URI MongoDB cloud d√©tect√©e");
        } else {
            console.log("‚ö†Ô∏è URI MongoDB locale d√©tect√©e");
        }
    } else {
        console.log("‚ùå MONGODB_URI manquante");
    }

    // 2. Test de connexion MongoDB
    console.log("\n2Ô∏è‚É£ TEST DE CONNEXION MONGODB");
    console.log("-".repeat(40));

    try {
        await connectMongoDB();
        console.log("‚úÖ Connexion MongoDB √©tablie");

        // Test du mod√®le Review
        const reviewCount = await Review.countDocuments();
        console.log(`‚úÖ Mod√®le Review accessible - ${reviewCount} reviews`);
    } catch (error) {
        console.log("‚ùå Erreur de connexion MongoDB:", error.message);
    }

    // 3. Test de l'API
    console.log("\n3Ô∏è‚É£ TEST DE L'API");
    console.log("-".repeat(40));

    try {
        const response = await axios.get(`${API_BASE_URL}/users/109`);
        console.log("‚úÖ API accessible");
        console.log(`‚úÖ Statut: ${response.status}`);

        if (response.data.stats) {
            console.log("‚úÖ Statistiques pr√©sentes dans la r√©ponse");
            console.log(`   - Total trips: ${response.data.stats.totalTrips}`);
            console.log(
                `   - Note moyenne: ${response.data.stats.averageRating}`
            );
            console.log(
                `   - Total reviews: ${response.data.stats.totalReviews}`
            );
        } else {
            console.log("‚ùå Statistiques manquantes dans la r√©ponse");
        }

        if (response.data.reviews) {
            console.log(
                `‚úÖ Reviews pr√©sentes: ${response.data.reviews.length} reviews`
            );
            if (response.data.reviews.length > 0) {
                const firstReview = response.data.reviews[0];
                if (firstReview.id && firstReview.id.length > 20) {
                    console.log("‚úÖ Format ID MongoDB d√©tect√©");
                } else {
                    console.log("‚ö†Ô∏è Format ID suspect");
                }
            }
        } else {
            console.log("‚ùå Reviews manquantes dans la r√©ponse");
        }
    } catch (error) {
        console.log("‚ùå Erreur API:", error.message);
        if (error.response) {
            console.log(`   - Statut: ${error.response.status}`);
            console.log(
                `   - Message: ${
                    error.response.data?.message || "Aucun message"
                }`
            );
        }
    }

    // 4. Test des m√©thodes MongoDB
    console.log("\n4Ô∏è‚É£ TEST DES M√âTHODES MONGODB");
    console.log("-".repeat(40));

    try {
        // Test getAverageRating
        const stats = await Review.getAverageRating(109);
        console.log("‚úÖ getAverageRating fonctionnelle");
        console.log(`   - Note moyenne: ${stats.average}`);
        console.log(`   - Total: ${stats.total}`);

        // Test find reviews
        const reviews = await Review.find({
            reviewedUserId: 109,
            validationStatus: "approved",
        }).limit(3);
        console.log(`‚úÖ R√©cup√©ration reviews: ${reviews.length} trouv√©es`);

        // Test pending reviews
        const pending = await Review.getPendingReviews();
        console.log(`‚úÖ Reviews en attente: ${pending.length} trouv√©es`);
    } catch (error) {
        console.log("‚ùå Erreur m√©thodes MongoDB:", error.message);
    }

    // 5. V√©rification des imports
    console.log("\n5Ô∏è‚É£ V√âRIFICATION DES IMPORTS");
    console.log("-".repeat(40));

    try {
        const userController = require("../controllers/userController.js");
        console.log("‚úÖ userController import√© avec succ√®s");

        const reviewController = require("../controllers/reviewController.js");
        console.log("‚úÖ reviewController import√© avec succ√®s");

        const ReviewModel = require("../models/Review.js");
        console.log("‚úÖ Mod√®le Review import√© avec succ√®s");
    } catch (error) {
        console.log("‚ùå Erreur import:", error.message);
    }

    // 6. R√©sum√© et recommandations
    console.log("\n6Ô∏è‚É£ R√âSUM√â ET RECOMMANDATIONS");
    console.log("-".repeat(40));

    console.log("üìã Points √† v√©rifier:");
    console.log("   - Variables d'environnement MongoDB configur√©es");
    console.log("   - Connexion MongoDB √©tablie");
    console.log("   - API accessible et fonctionnelle");
    console.log("   - Reviews r√©cup√©r√©es depuis MongoDB");
    console.log("   - Statistiques calcul√©es correctement");

    console.log("\nüîß Actions recommand√©es:");
    console.log("   1. V√©rifier MONGODB_URI dans Railway");
    console.log("   2. S'assurer que MongoDB Atlas est accessible");
    console.log("   3. V√©rifier les permissions de la base MongoDB");
    console.log("   4. Tester avec des donn√©es de test si n√©cessaire");

    // Fermer la connexion MongoDB
    await mongoose.connection.close();
    console.log("\nüîí Connexion MongoDB ferm√©e");
}

// Ex√©cuter le diagnostic
diagnosticComplet().catch(console.error);
