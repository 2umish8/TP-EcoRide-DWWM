#!/usr/bin/env node

/**
 * Script de test rapide MongoDB - V√©rification post-installation
 */

const mongoose = require("mongoose");
require("dotenv").config();

console.log("üîç V√©rification de MongoDB...\n");

// Test de connexion
async function testMongoDB() {
    try {
        console.log("üì° Tentative de connexion √† MongoDB...");
        console.log("URI:", process.env.MONGODB_URI);

        await mongoose.connect(process.env.MONGODB_URI);
        console.log("‚úÖ MongoDB connect√© avec succ√®s !");

        // Test de cr√©ation d'une collection
        const TestSchema = new mongoose.Schema({
            test: String,
            timestamp: { type: Date, default: Date.now },
        });

        const TestModel = mongoose.model("TestConnection", TestSchema);

        // Ins√©rer un document de test
        const testDoc = new TestModel({ test: "Installation MongoDB r√©ussie" });
        await testDoc.save();
        console.log("‚úÖ Test d'√©criture r√©ussi !");

        // Lire le document
        const foundDoc = await TestModel.findOne({
            test: "Installation MongoDB r√©ussie",
        });
        if (foundDoc) {
            console.log("‚úÖ Test de lecture r√©ussi !");
        }

        // Nettoyer
        await TestModel.deleteMany({});
        console.log("‚úÖ Test de suppression r√©ussi !");

        console.log("\nüéâ MongoDB est pr√™t pour EcoRide !");
    } catch (error) {
        console.error("‚ùå Erreur MongoDB:", error.message);

        if (error.message.includes("ECONNREFUSED")) {
            console.log("\nüí° Solutions possibles:");
            console.log(
                "1. V√©rifier que MongoDB est d√©marr√© : net start MongoDB"
            );
            console.log("2. Ou d√©marrer manuellement : mongod");
            console.log("3. V√©rifier le port 27017");
        }

        process.exit(1);
    } finally {
        await mongoose.disconnect();
        console.log("üîå Connexion ferm√©e");
    }
}

testMongoDB();
