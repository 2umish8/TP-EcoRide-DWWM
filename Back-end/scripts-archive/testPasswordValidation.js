const {
    analyzePasswordStrength,
    validatePassword,
    validatePasswordConfirmation,
    generateSecurePassword,
    passwordValidationExamples,
} = require("../utils/passwordValidator.js");

/**
 * Script de test pour la validation de mots de passe
 * Ce script teste les fonctions de validation avec diff√©rents cas de figure
 */

console.log("üîê Test de validation de mots de passe - EcoRide\n");

// Test des mots de passe valides
console.log("‚úÖ Test des mots de passe VALIDES:");
console.log("‚îÄ".repeat(60));

passwordValidationExamples.valid.forEach((password, index) => {
    const analysis = analyzePasswordStrength(password);
    console.log(`${index + 1}. "${password}"`);
    console.log(
        `   ‚îî‚îÄ Force: ${analysis.strength} (${analysis.percentage}%) - ${
            analysis.isValid ? "‚úÖ VALIDE" : "‚ùå INVALIDE"
        }`
    );
    if (analysis.errors.length > 0) {
        console.log(`   ‚îî‚îÄ Erreurs: ${analysis.errors.join(", ")}`);
    }
});

console.log("\n‚ùå Test des mots de passe INVALIDES:");
console.log("‚îÄ".repeat(60));

passwordValidationExamples.invalid.forEach((password, index) => {
    const analysis = analyzePasswordStrength(password);
    const displayPassword =
        password.length > 20 ? password.substring(0, 20) + "..." : password;
    console.log(`${index + 1}. "${displayPassword}"`);
    console.log(
        `   ‚îî‚îÄ Force: ${analysis.strength} (${analysis.percentage}%) - ${
            analysis.isValid ? "‚úÖ VALIDE" : "‚ùå INVALIDE"
        }`
    );
    if (analysis.errors.length > 0) {
        console.log(
            `   ‚îî‚îÄ Erreurs: ${analysis.errors.slice(0, 2).join(", ")}${
                analysis.errors.length > 2 ? "..." : ""
            }`
        );
    }
});

// Tests de validation d√©taill√©e
console.log("\nüîç Test de validation d√©taill√©e:");
console.log("‚îÄ".repeat(60));

const detailedTests = [
    "Pass123!", // Valide
    "password", // Trop faible
    "PASSWORD123", // Pas de minuscule ni caract√®re sp√©cial
    "MyP@ssw0rd", // Pas de chiffre
    "Short1!", // Trop court mais sinon valide
    "Tr√®s_Long_M0t_De_P@sse_Qui_Respecte_Tous_Les_Crit√®res_123!", // Long mais valide
];

detailedTests.forEach((password, index) => {
    const validation = validatePassword(password);
    console.log(`${index + 1}. "${password}"`);
    console.log(`   ‚îî‚îÄ Valide: ${validation.isValid ? "‚úÖ OUI" : "‚ùå NON"}`);

    if (!validation.isValid) {
        console.log(`   ‚îî‚îÄ Erreurs: ${validation.errors.join(", ")}`);
        if (validation.suggestions.length > 0) {
            console.log(
                `   ‚îî‚îÄ Suggestions: ${validation.suggestions
                    .slice(0, 2)
                    .join(", ")}`
            );
        }
    }
});

// Test de confirmation de mot de passe
console.log("\nüîÑ Test de confirmation de mots de passe:");
console.log("‚îÄ".repeat(60));

const confirmationTests = [
    { password: "MyP@ssw0rd123", confirm: "MyP@ssw0rd123", expected: true },
    { password: "MyP@ssw0rd123", confirm: "MyP@ssw0rd124", expected: false },
    { password: "Test123!", confirm: "", expected: false },
    { password: "", confirm: "Test123!", expected: false },
];

confirmationTests.forEach((test, index) => {
    const result = validatePasswordConfirmation(test.password, test.confirm);
    const status = result.isValid === test.expected ? "‚úÖ" : "‚ùå";
    console.log(
        `${index + 1}. ${status} Mot de passe: "${
            test.password
        }" | Confirmation: "${test.confirm}"`
    );
    if (!result.isValid) {
        console.log(`   ‚îî‚îÄ Erreur: ${result.error}`);
    }
});

// Test de g√©n√©ration de mot de passe s√©curis√©
console.log("\nüé≤ Test de g√©n√©ration de mots de passe s√©curis√©s:");
console.log("‚îÄ".repeat(60));

for (let i = 0; i < 5; i++) {
    const generatedPassword = generateSecurePassword(12);
    const analysis = analyzePasswordStrength(generatedPassword);
    console.log(`${i + 1}. "${generatedPassword}"`);
    console.log(
        `   ‚îî‚îÄ Force: ${analysis.strength} (${analysis.percentage}%) - ${
            analysis.isValid ? "‚úÖ VALIDE" : "‚ùå INVALIDE"
        }`
    );
}

// Test avec diff√©rentes longueurs
console.log("\nüìè Test avec diff√©rentes longueurs de mots de passe g√©n√©r√©s:");
console.log("‚îÄ".repeat(60));

[8, 12, 16, 20].forEach((length) => {
    const password = generateSecurePassword(length);
    const analysis = analyzePasswordStrength(password);
    console.log(`Longueur ${length}: "${password}"`);
    console.log(
        `   ‚îî‚îÄ Force: ${analysis.strength} (${analysis.percentage}%) - ${
            analysis.isValid ? "‚úÖ VALIDE" : "‚ùå INVALIDE"
        }`
    );
});

console.log("\nüéØ R√©sum√© des crit√®res de mot de passe EcoRide:");
console.log("‚îÄ".repeat(60));
console.log("‚Ä¢ Minimum 8 caract√®res");
console.log("‚Ä¢ Maximum 128 caract√®res");
console.log("‚Ä¢ Au moins 1 lettre minuscule (a-z)");
console.log("‚Ä¢ Au moins 1 lettre majuscule (A-Z)");
console.log("‚Ä¢ Au moins 1 chiffre (0-9)");
console.log("‚Ä¢ Au moins 1 caract√®re sp√©cial (!@#$%^&*...)");
console.log("‚Ä¢ Aucun caract√®re interdit (<>'\"&;)");

console.log("\nüõ°Ô∏è Exemples de mots de passe recommand√©s:");
console.log("‚îÄ".repeat(60));
console.log("‚Ä¢ MyP@ssw0rd123");
console.log("‚Ä¢ SecureP@ss1");
console.log("‚Ä¢ C0mpl3xP@ss!");
console.log("‚Ä¢ EcoRide2025!");

module.exports = {
    runPasswordValidationTests: () => {
        console.log(
            "Tests de validation de mot de passe ex√©cut√©s avec succ√®s !"
        );
    },
};
