const axios = require("axios");

// Configuration de base
const BASE_URL = "http://localhost:3000/api";
let driverToken = "";
let passengerToken = "";
let passenger2Token = "";
let driverUserId = "";
let passengerUserId = "";
let passenger2UserId = "";
let vehicleId = "";
let carpoolingIds = [];
let participationIds = [];

// Helper pour les requ√™tes authentifi√©es
const authenticatedRequest = (token, config) => ({
    ...config,
    headers: {
        ...config.headers,
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
    },
});

// Fonction pour attendre un peu entre les tests
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// Fonction pour formater les dates au format MySQL
const formatDateForMySQL = (date) => {
    return date.toISOString().slice(0, 19).replace("T", " ");
};

// Tests complets des fonctionnalit√©s de participation
async function testParticipationFunctionality() {
    console.log(
        "üë• D√©marrage des tests des fonctionnalit√©s de participation EcoRide\n"
    );

    const timestamp = Date.now();

    try {
        // ============ SETUP: CR√âATION DES UTILISATEURS ============
        console.log("üîß Setup: Cr√©ation des utilisateurs de test");

        // Cr√©er un chauffeur
        const driver = {
            pseudo: `driver_${timestamp}`,
            email: `driver_${timestamp}@test.com`,
            password: "Test123!",
        };

        const driverRegisterResponse = await axios.post(
            `${BASE_URL}/users/register`,
            driver
        );
        console.log("‚úÖ Chauffeur cr√©√©:", driverRegisterResponse.data.message);

        const driverLoginResponse = await axios.post(
            `${BASE_URL}/users/login`,
            {
                identifier: driver.email,
                password: driver.password,
            }
        );
        driverToken = driverLoginResponse.data.token;
        driverUserId = driverLoginResponse.data.user.id;

        // Devenir chauffeur
        await axios.post(
            `${BASE_URL}/users/become-driver`,
            {},
            authenticatedRequest(driverToken, {})
        );

        // Reconnexion pour obtenir les nouveaux r√¥les
        const driverReloginResponse = await axios.post(
            `${BASE_URL}/users/login`,
            {
                identifier: driver.email,
                password: driver.password,
            }
        );
        driverToken = driverReloginResponse.data.token;
        console.log("‚úÖ Chauffeur connect√© et r√¥le attribu√©");

        // Cr√©er premier passager
        const passenger1 = {
            pseudo: `passenger1_${timestamp}`,
            email: `passenger1_${timestamp}@test.com`,
            password: "Test123!",
        };

        const passenger1RegisterResponse = await axios.post(
            `${BASE_URL}/users/register`,
            passenger1
        );
        console.log(
            "‚úÖ Passager 1 cr√©√©:",
            passenger1RegisterResponse.data.message
        );

        const passenger1LoginResponse = await axios.post(
            `${BASE_URL}/users/login`,
            {
                identifier: passenger1.email,
                password: passenger1.password,
            }
        );
        passengerToken = passenger1LoginResponse.data.token;
        passengerUserId = passenger1LoginResponse.data.user.id;
        console.log("‚úÖ Passager 1 connect√©");

        // Cr√©er deuxi√®me passager
        const passenger2 = {
            pseudo: `passenger2_${timestamp}`,
            email: `passenger2_${timestamp}@test.com`,
            password: "Test123!",
        };

        const passenger2RegisterResponse = await axios.post(
            `${BASE_URL}/users/register`,
            passenger2
        );
        console.log(
            "‚úÖ Passager 2 cr√©√©:",
            passenger2RegisterResponse.data.message
        );

        const passenger2LoginResponse = await axios.post(
            `${BASE_URL}/users/login`,
            {
                identifier: passenger2.email,
                password: passenger2.password,
            }
        );
        passenger2Token = passenger2LoginResponse.data.token;
        passenger2UserId = passenger2LoginResponse.data.user.id;
        console.log("‚úÖ Passager 2 connect√©");
        console.log("");

        // ============ SETUP: CR√âATION V√âHICULE ET COVOITURAGES ============
        console.log("üöó Setup: Cr√©ation du v√©hicule et des covoiturages");

        // Ajouter un v√©hicule au chauffeur
        const vehicle = {
            plate_number: `TEST-${timestamp.toString().slice(-6)}`,
            model: "Clio",
            seats_available: 4,
            is_electric: false,
            brand_name: "Renault",
            color_name: "Bleu",
        };

        const vehicleResponse = await axios.post(
            `${BASE_URL}/vehicles`,
            vehicle,
            authenticatedRequest(driverToken, {})
        );
        vehicleId = vehicleResponse.data.vehicleId;
        console.log("‚úÖ V√©hicule ajout√©, ID:", vehicleId);

        // Cr√©er plusieurs covoiturages avec diff√©rents prix
        const carpoolings = [
            {
                departure_address: "Paris, Gare du Nord",
                arrival_address: "Lyon, Part-Dieu",
                departure_datetime: formatDateForMySQL(
                    new Date(Date.now() + 24 * 60 * 60 * 1000)
                ),
                arrival_datetime: formatDateForMySQL(
                    new Date(Date.now() + 28 * 60 * 60 * 1000)
                ),
                price_per_passenger: 15, // Prix abordable pour tester
                seats_offered: 3,
                vehicle_id: vehicleId,
            },
            {
                departure_address: "Lyon, Part-Dieu",
                arrival_address: "Marseille, Saint-Charles",
                departure_datetime: formatDateForMySQL(
                    new Date(Date.now() + 48 * 60 * 60 * 1000)
                ),
                arrival_datetime: formatDateForMySQL(
                    new Date(Date.now() + 51 * 60 * 60 * 1000)
                ),
                price_per_passenger: 5, // Prix plus bas pour permettre le test d'annulation
                seats_offered: 2,
                vehicle_id: vehicleId,
            },
        ];

        for (let i = 0; i < carpoolings.length; i++) {
            const carpoolingResponse = await axios.post(
                `${BASE_URL}/carpoolings`,
                carpoolings[i],
                authenticatedRequest(driverToken, {})
            );
            carpoolingIds.push(carpoolingResponse.data.carpoolingId);
            console.log(
                `‚úÖ Covoiturage ${i + 1} cr√©√©: ${
                    carpoolings[i].departure_address
                } ‚Üí ${carpoolings[i].arrival_address}`
            );
            console.log(
                `   ID: ${carpoolingResponse.data.carpoolingId}, Prix: ${carpoolings[i].price_per_passenger} cr√©dits`
            );
        }
        console.log("");

        // ============ TEST 1: PARTICIPATION √Ä UN COVOITURAGE ============
        console.log("üéØ Test 1: Participation d'un passager √† un covoiturage");

        const targetCarpoolingId = carpoolingIds[0]; // Paris ‚Üí Lyon (15 cr√©dits)

        // V√©rifier l'√©tat initial du covoiturage
        const initialCarpoolingResponse = await axios.get(
            `${BASE_URL}/carpoolings/${targetCarpoolingId}`
        );
        const initialCarpooling = initialCarpoolingResponse.data.carpooling;
        console.log("üìã √âtat initial du covoiturage:");
        console.log(
            `   Places restantes: ${initialCarpooling.seats_remaining}/${initialCarpooling.initial_seats_offered}`
        );
        console.log(
            `   Prix: ${initialCarpooling.price_per_passenger} cr√©dits`
        );

        // V√©rifier les cr√©dits du passager avant participation
        const passengerCreditsBeforeResponse = await axios.get(
            `${BASE_URL}/credits/balance`,
            authenticatedRequest(passengerToken, {})
        );
        console.log(
            `   Cr√©dits passager avant: ${passengerCreditsBeforeResponse.data.credits} cr√©dits`
        );

        // Participer au covoiturage
        console.log("\nüé´ Participation au covoiturage...");
        const joinResponse = await axios.post(
            `${BASE_URL}/participations/${targetCarpoolingId}/join`,
            {},
            authenticatedRequest(passengerToken, {})
        );
        console.log("‚úÖ Participation r√©ussie:", joinResponse.data.message);

        // V√©rifier l'√©tat apr√®s participation
        const afterJoinCarpoolingResponse = await axios.get(
            `${BASE_URL}/carpoolings/${targetCarpoolingId}`
        );
        const afterJoinCarpooling = afterJoinCarpoolingResponse.data.carpooling;
        console.log("\nüìä √âtat apr√®s participation:");
        console.log(
            `   Places restantes: ${afterJoinCarpooling.seats_remaining}/${
                afterJoinCarpooling.initial_seats_offered
            } (${
                initialCarpooling.seats_remaining -
                afterJoinCarpooling.seats_remaining
            } place en moins)`
        );

        // V√©rifier la d√©duction des cr√©dits
        const passengerCreditsAfterResponse = await axios.get(
            `${BASE_URL}/credits/balance`,
            authenticatedRequest(passengerToken, {})
        );
        const creditsDeducted =
            passengerCreditsBeforeResponse.data.credits -
            passengerCreditsAfterResponse.data.credits;
        console.log(
            `   Cr√©dits passager apr√®s: ${passengerCreditsAfterResponse.data.credits} cr√©dits`
        );
        console.log(
            `   Cr√©dits d√©duits: ${creditsDeducted} cr√©dits (attendu: ${initialCarpooling.price_per_passenger})`
        );

        // V√©rifier les participants du covoiturage
        const participantsResponse = await axios.get(
            `${BASE_URL}/participations/${targetCarpoolingId}/participants`,
            authenticatedRequest(driverToken, {})
        );
        console.log(
            `   Participants: ${participantsResponse.data.participants.length} participant(s)`
        );
        console.log("");

        // ============ TEST 2: PARTICIPATION MULTIPLE ============
        console.log("üë• Test 2: Participation de plusieurs passagers");

        // Le deuxi√®me passager rejoint le m√™me covoiturage
        console.log("üé´ Deuxi√®me passager rejoint le covoiturage...");
        const passenger2CreditsBeforeResponse = await axios.get(
            `${BASE_URL}/credits/balance`,
            authenticatedRequest(passenger2Token, {})
        );
        console.log(
            `   Cr√©dits passager 2 avant: ${passenger2CreditsBeforeResponse.data.credits} cr√©dits`
        );

        const join2Response = await axios.post(
            `${BASE_URL}/participations/${targetCarpoolingId}/join`,
            {},
            authenticatedRequest(passenger2Token, {})
        );
        console.log(
            "‚úÖ Deuxi√®me participation r√©ussie:",
            join2Response.data.message
        );

        // V√©rifier l'√©tat apr√®s la deuxi√®me participation
        const afterJoin2CarpoolingResponse = await axios.get(
            `${BASE_URL}/carpoolings/${targetCarpoolingId}`
        );
        const afterJoin2Carpooling =
            afterJoin2CarpoolingResponse.data.carpooling;
        console.log("\nüìä √âtat apr√®s 2 participations:");
        console.log(
            `   Places restantes: ${afterJoin2Carpooling.seats_remaining}/${afterJoin2Carpooling.initial_seats_offered}`
        );

        const participants2Response = await axios.get(
            `${BASE_URL}/participations/${targetCarpoolingId}/participants`,
            authenticatedRequest(driverToken, {})
        );
        console.log(
            `   Total participants: ${participants2Response.data.participants.length} participant(s)`
        );
        participants2Response.data.participants.forEach(
            (participant, index) => {
                console.log(
                    `     ${index + 1}. ${participant.pseudo} (${
                        participant.email
                    })`
                );
            }
        );
        console.log("");

        // ============ TEST 3: CONSULTATION DES PARTICIPATIONS ============
        console.log("üìã Test 3: Consultation des participations");

        // Lister les participations du premier passager
        const myParticipationsResponse = await axios.get(
            `${BASE_URL}/participations/my-participations`,
            authenticatedRequest(passengerToken, {})
        );
        console.log(
            `‚úÖ Participations du passager 1: ${myParticipationsResponse.data.participations.length} participation(s)`
        );

        myParticipationsResponse.data.participations.forEach(
            (participation, index) => {
                console.log(
                    `   ${index + 1}. Covoiturage ID: ${
                        participation.carpooling_id
                    }`
                );
                console.log(
                    `      Route: ${participation.departure_address} ‚Üí ${participation.arrival_address}`
                );
                console.log(
                    `      Prix pay√©: ${participation.credits_paid} cr√©dits`
                );
                console.log(
                    `      Date: ${new Date(
                        participation.participation_date
                    ).toLocaleString("fr-FR")}`
                );
                console.log(
                    `      Statut validation: ${
                        participation.is_validated_by_passenger === null
                            ? "En attente"
                            : participation.is_validated_by_passenger
                            ? "Valid√©"
                            : "Probl√®me signal√©"
                    }`
                );
            }
        );
        console.log("");

        // ============ TEST 4: D√âMARRAGE ET CONFIRMATION DU COVOITURAGE ============
        console.log("üöÄ Test 4: D√©marrage du covoiturage et confirmation");

        // Le chauffeur d√©marre le covoiturage
        console.log("‚ñ∂Ô∏è D√©marrage du covoiturage par le chauffeur...");
        const startResponse = await axios.post(
            `${BASE_URL}/carpoolings/${targetCarpoolingId}/start`,
            {},
            authenticatedRequest(driverToken, {})
        );
        console.log("‚úÖ Covoiturage d√©marr√©:", startResponse.data.message);

        // Attendre un peu pour simuler le trajet
        await sleep(3000);

        // Le chauffeur termine le covoiturage
        console.log("\nüèÅ Fin du covoiturage par le chauffeur...");
        const finishResponse = await axios.post(
            `${BASE_URL}/carpoolings/${targetCarpoolingId}/finish`,
            {},
            authenticatedRequest(driverToken, {})
        );
        console.log("‚úÖ Covoiturage termin√©:", finishResponse.data.message);

        // V√©rifier l'√©tat final
        const finalCarpoolingResponse = await axios.get(
            `${BASE_URL}/carpoolings/${targetCarpoolingId}`
        );
        const finalCarpooling = finalCarpoolingResponse.data.carpooling;
        console.log(`   Statut final: ${finalCarpooling.status}`);
        console.log("");

        // ============ TEST 5: CONFIRMATION DU BON D√âROULEMENT ============
        console.log(
            "‚úÖ Test 5: Confirmation du bon d√©roulement par les passagers"
        );

        // Premier passager confirme le bon d√©roulement
        console.log("üëç Passager 1 confirme le bon d√©roulement...");
        const validate1Response = await axios.post(
            `${BASE_URL}/participations/${targetCarpoolingId}/validate`,
            { is_validated: true },
            authenticatedRequest(passengerToken, {})
        );
        console.log(
            "‚úÖ Validation passager 1:",
            validate1Response.data.message
        );

        // Deuxi√®me passager confirme aussi
        console.log("\nüëç Passager 2 confirme le bon d√©roulement...");
        const validate2Response = await axios.post(
            `${BASE_URL}/participations/${targetCarpoolingId}/validate`,
            { is_validated: true },
            authenticatedRequest(passenger2Token, {})
        );
        console.log(
            "‚úÖ Validation passager 2:",
            validate2Response.data.message
        );

        // V√©rifier les participations apr√®s validation
        const finalParticipationsResponse = await axios.get(
            `${BASE_URL}/participations/my-participations`,
            authenticatedRequest(passengerToken, {})
        );
        console.log("\nüìä √âtat final des participations:");
        finalParticipationsResponse.data.participations.forEach(
            (participation, index) => {
                console.log(
                    `   ${index + 1}. Covoiturage ID: ${
                        participation.carpooling_id
                    }`
                );
                console.log(
                    `      Statut validation: ${
                        participation.is_validated_by_passenger === null
                            ? "En attente"
                            : participation.is_validated_by_passenger
                            ? "Confirm√© ‚úÖ"
                            : "Probl√®me signal√© ‚ùå"
                    }`
                );
            }
        );
        console.log("");

        // ============ TEST 6: TENTATIVE DE PARTICIPATION SANS CR√âDITS SUFFISANTS ============
        console.log(
            "üí∏ Test 6: Tentative de participation sans cr√©dits suffisants"
        );

        const expensiveCarpoolingId = carpoolingIds[1]; // Lyon ‚Üí Marseille (18 cr√©dits)

        // V√©rifier les cr√©dits actuels du passager 1 (qui a d√©pens√© 15 cr√©dits)
        const currentCreditsResponse = await axios.get(
            `${BASE_URL}/credits/balance`,
            authenticatedRequest(passengerToken, {})
        );
        console.log(
            `üí∞ Cr√©dits actuels du passager 1: ${currentCreditsResponse.data.credits} cr√©dits`
        );

        const expensiveCarpoolingResponse = await axios.get(
            `${BASE_URL}/carpoolings/${expensiveCarpoolingId}`
        );
        const expensiveCarpooling = expensiveCarpoolingResponse.data.carpooling;
        console.log(
            `üí∞ Prix du covoiturage: ${expensiveCarpooling.price_per_passenger} cr√©dits`
        );

        try {
            const joinExpensiveResponse = await axios.post(
                `${BASE_URL}/participations/${expensiveCarpoolingId}/join`,
                {},
                authenticatedRequest(passengerToken, {})
            );
            console.log(
                "‚ùå ERREUR: La participation a √©t√© accept√©e alors qu'elle ne devrait pas!"
            );
        } catch (error) {
            if (error.response && error.response.status === 400) {
                console.log(
                    "‚úÖ Participation refus√©e comme attendu:",
                    error.response.data.message
                );
            } else {
                console.log(
                    "‚ö†Ô∏è Erreur inattendue:",
                    error.response?.data?.message || error.message
                );
            }
        }
        console.log("");

        // ============ TEST 7: ANNULATION D'UNE PARTICIPATION ============
        console.log("üö´ Test 7: Annulation d'une participation");

        // Le passager 2 participe d'abord au deuxi√®me covoiturage
        console.log("üé´ Passager 2 rejoint le deuxi√®me covoiturage...");
        const joinForCancelResponse = await axios.post(
            `${BASE_URL}/participations/${expensiveCarpoolingId}/join`,
            {},
            authenticatedRequest(passenger2Token, {})
        );
        console.log(
            "‚úÖ Participation r√©ussie:",
            joinForCancelResponse.data.message
        );

        // V√©rifier l'√©tat avant annulation
        const beforeCancelResponse = await axios.get(
            `${BASE_URL}/carpoolings/${expensiveCarpoolingId}`
        );
        const beforeCancel = beforeCancelResponse.data.carpooling;
        console.log(
            `   Places avant annulation: ${beforeCancel.seats_remaining}/${beforeCancel.initial_seats_offered}`
        );

        // Annuler la participation
        console.log("\nüö´ Annulation de la participation...");
        const cancelParticipationResponse = await axios.post(
            `${BASE_URL}/participations/${expensiveCarpoolingId}/cancel`,
            { reason: "Emp√™chement de derni√®re minute" },
            authenticatedRequest(passenger2Token, {})
        );
        console.log(
            "‚úÖ Participation annul√©e:",
            cancelParticipationResponse.data.message
        );

        // V√©rifier l'√©tat apr√®s annulation
        const afterCancelResponse = await axios.get(
            `${BASE_URL}/carpoolings/${expensiveCarpoolingId}`
        );
        const afterCancel = afterCancelResponse.data.carpooling;
        console.log(
            `   Places apr√®s annulation: ${afterCancel.seats_remaining}/${afterCancel.initial_seats_offered} (place lib√©r√©e)`
        );

        // V√©rifier le remboursement
        const refundedCreditsResponse = await axios.get(
            `${BASE_URL}/credits/balance`,
            authenticatedRequest(passenger2Token, {})
        );
        console.log(
            `   Cr√©dits apr√®s remboursement: ${refundedCreditsResponse.data.credits} cr√©dits`
        );
        console.log("");

        // ============ R√âSUM√â FINAL ============
        console.log("üéâ TOUS LES TESTS DE PARTICIPATION ONT R√âUSSI!");
        console.log("‚úÖ Participation √† un covoiturage");
        console.log("‚úÖ D√©duction automatique des cr√©dits");
        console.log("‚úÖ R√©duction des places disponibles");
        console.log("‚úÖ Participation multiple (plusieurs passagers)");
        console.log("‚úÖ Consultation des participations");
        console.log("‚úÖ D√©marrage et fin de covoiturage");
        console.log("‚úÖ Confirmation du bon d√©roulement");
        console.log("‚úÖ Validation avec notes et commentaires");
        console.log("‚úÖ Gestion des cr√©dits insuffisants");
        console.log("‚úÖ Annulation de participation avec remboursement");

        // Statistiques finales
        const finalStatsResponse = await axios.get(
            `${BASE_URL}/participations/my-participations`,
            authenticatedRequest(passengerToken, {})
        );

        console.log("\nüìä Statistiques finales:");
        console.log(
            `   Participations passager 1: ${finalStatsResponse.data.participations.length}`
        );
        console.log(
            `   Cr√©dits restants passager 1: ${currentCreditsResponse.data.credits}`
        );
        console.log(
            `   Cr√©dits restants passager 2: ${refundedCreditsResponse.data.credits}`
        );
        console.log(`   Covoiturages test√©s: ${carpoolingIds.length}`);
    } catch (error) {
        console.error("\n‚ùå ERREUR lors des tests de participation:");

        if (error.response) {
            console.error(`   Status: ${error.response.status}`);
            console.error(
                `   Message: ${
                    error.response.data.error ||
                    error.response.data.message ||
                    "Erreur inconnue"
                }`
            );
            if (error.response.data.details) {
                console.error(
                    `   D√©tails: ${JSON.stringify(
                        error.response.data.details,
                        null,
                        2
                    )}`
                );
            }
        } else {
            console.error(`   Erreur: ${error.message}`);
        }

        console.log("\nüìã √âtat du test au moment de l'erreur:");
        console.log(
            `   Token chauffeur: ${driverToken ? "Pr√©sent" : "Absent"}`
        );
        console.log(
            `   Token passager 1: ${passengerToken ? "Pr√©sent" : "Absent"}`
        );
        console.log(
            `   Token passager 2: ${passenger2Token ? "Pr√©sent" : "Absent"}`
        );
        console.log(`   V√©hicule cr√©√©: ${vehicleId || "Non d√©fini"}`);
        console.log(`   Covoiturages cr√©√©s: ${carpoolingIds.length}`);
    }
}

// Fonction utilitaire pour nettoyer les donn√©es de test
async function cleanupTestData() {
    console.log("\nüßπ Nettoyage des donn√©es de test...");

    try {
        // Annuler toutes les participations
        for (const carpoolingId of carpoolingIds) {
            try {
                // Annuler les participations
                if (passengerToken) {
                    await axios.post(
                        `${BASE_URL}/participations/${carpoolingId}/cancel`,
                        { reason: "Nettoyage des tests" },
                        authenticatedRequest(passengerToken, {})
                    );
                }
                if (passenger2Token) {
                    await axios.post(
                        `${BASE_URL}/participations/${carpoolingId}/cancel`,
                        { reason: "Nettoyage des tests" },
                        authenticatedRequest(passenger2Token, {})
                    );
                }

                // Annuler le covoiturage
                await axios.post(
                    `${BASE_URL}/carpoolings/${carpoolingId}/cancel`,
                    { reason: "Nettoyage des tests" },
                    authenticatedRequest(driverToken, {})
                );
            } catch (error) {
                // Ignorer les erreurs (participation peut d√©j√† √™tre annul√©e)
            }
        }

        // Supprimer le v√©hicule
        if (vehicleId && driverToken) {
            try {
                await axios.delete(
                    `${BASE_URL}/vehicles/${vehicleId}`,
                    authenticatedRequest(driverToken, {})
                );
            } catch (error) {
                // Ignorer les erreurs
            }
        }

        console.log("‚úÖ Donn√©es de test nettoy√©es");
    } catch (error) {
        console.log(
            "‚ÑπÔ∏è Impossible de nettoyer automatiquement toutes les donn√©es de test"
        );
    }
}

// Ex√©cuter les tests si ce script est lanc√© directement
if (require.main === module) {
    testParticipationFunctionality()
        .then(() => {
            console.log("\n‚ú® Tests termin√©s avec succ√®s!");
            return cleanupTestData();
        })
        .then(() => {
            process.exit(0);
        })
        .catch((error) => {
            console.error("\nüí• √âchec des tests:", error.message);
            cleanupTestData().finally(() => {
                process.exit(1);
            });
        });
}

module.exports = {
    testParticipationFunctionality,
    cleanupTestData,
};
