const axios = require("axios");

// Configuration de base
const BASE_URL = "http://localhost:3000/api";
let authToken = "";
let userId = "";

// Helper pour les requ√™tes authentifi√©es
const authenticatedRequest = (config) => ({
    ...config,
    headers: {
        ...config.headers,
        Authorization: `Bearer ${authToken}`,
        "Content-Type": "application/json",
    },
});

// Fonction pour attendre un peu entre les tests
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// Tests complets des fonctionnalit√©s utilisateur
async function testUserFunctionality() {
    console.log(
        "üöÄ D√©marrage des tests des fonctionnalit√©s utilisateur EcoRide\n"
    );

    // Donn√©es utilisateur de test
    const timestamp = Date.now();
    const testUser = {
        pseudo: `testeur_${timestamp}`,
        email: `testeur_${timestamp}@test.com`,
        password: "Test123!",
    };

    try {
        // ============ TEST 1: CR√âATION DE COMPTE ============
        console.log("üìù Test 1: Cr√©ation d'un compte utilisateur");
        console.log(`   Pseudo: ${testUser.pseudo}`);
        console.log(`   Email: ${testUser.email}`);

        const registerResponse = await axios.post(
            `${BASE_URL}/users/register`,
            testUser
        );

        console.log("‚úÖ Inscription r√©ussie:", registerResponse.data.message);
        if (registerResponse.data.user) {
            userId = registerResponse.data.user.id;
            console.log(`   ID utilisateur: ${userId}`);
        }
        console.log("");

        // Attendre un peu avant le test suivant
        await sleep(1000);

        // ============ TEST 2: CONNEXION ============
        console.log("üîê Test 2: Connexion avec les identifiants");

        const loginResponse = await axios.post(`${BASE_URL}/users/login`, {
            identifier: testUser.email,
            password: testUser.password,
        });

        authToken = loginResponse.data.token;
        console.log("‚úÖ Connexion r√©ussie:", loginResponse.data.message);
        console.log(`   Token re√ßu: ${authToken.substring(0, 20)}...`);
        console.log("");

        // ============ TEST 3: V√âRIFICATION DE LA SESSION (RESTER CONNECT√â) ============
        console.log("üîí Test 3: V√©rification de la persistance de session");

        // Premier appel pour v√©rifier que le token fonctionne
        const sessionTest1 = await axios.get(
            `${BASE_URL}/users/profile`,
            authenticatedRequest({})
        );
        console.log("‚úÖ Session valide - Premier appel au profil r√©ussi");

        // Attendre 2 secondes et refaire un appel
        await sleep(2000);

        const sessionTest2 = await axios.get(
            `${BASE_URL}/users/profile`,
            authenticatedRequest({})
        );
        console.log("‚úÖ Session persistante - Deuxi√®me appel au profil r√©ussi");
        console.log(
            `   L'utilisateur reste connect√© sans avoir √† se reconnecter`
        );
        console.log("");

        // ============ TEST 4: CONSULTATION DU PROFIL ============
        console.log("üë§ Test 4: Consultation du profil utilisateur");

        const profileResponse = await axios.get(
            `${BASE_URL}/users/profile`,
            authenticatedRequest({})
        );

        const userProfile = profileResponse.data.user;
        console.log("‚úÖ Profil r√©cup√©r√© avec succ√®s:");
        console.log(`   Pseudo: ${userProfile.pseudo}`);
        console.log(`   Email: ${userProfile.email}`);
        console.log(`   Cr√©dits: ${userProfile.credits || "Non d√©fini"}`);
        console.log(`   Suspendu: ${userProfile.suspended ? "Oui" : "Non"}`);
        console.log(
            `   Photo de profil: ${
                userProfile.profile_picture_url || "Non d√©finie"
            }`
        );
        console.log(
            `   Date de cr√©ation: ${
                userProfile.creation_date
                    ? new Date(userProfile.creation_date).toLocaleString(
                          "fr-FR"
                      )
                    : "Non d√©finie"
            }`
        );
        console.log("");

        // ============ TEST 5: MODIFICATION DU PROFIL ============
        console.log("‚úèÔ∏è Test 5: Modification du profil utilisateur");

        const updatedData = {
            pseudo: `${testUser.pseudo}_modifie`,
        };

        const updateResponse = await axios.put(
            `${BASE_URL}/users/profile`,
            updatedData,
            authenticatedRequest({})
        );

        console.log("‚úÖ Profil mis √† jour:", updateResponse.data.message);

        // V√©rifier que les modifications ont √©t√© prises en compte
        const updatedProfileResponse = await axios.get(
            `${BASE_URL}/users/profile`,
            authenticatedRequest({})
        );

        const updatedProfile = updatedProfileResponse.data.user;
        console.log("‚úÖ V√©rification des modifications:");
        console.log(`   Nouveau pseudo: ${updatedProfile.pseudo}`);
        console.log("");

        // ============ TEST 6: CONSULTATION DES DONN√âES UTILISATEUR ============
        console.log("üìä Test 6: Consultation des donn√©es li√©es au compte");

        // V√©rifier les cr√©dits
        try {
            const creditsResponse = await axios.get(
                `${BASE_URL}/credits/balance`,
                authenticatedRequest({})
            );
            console.log(
                "‚úÖ Cr√©dits consult√©s:",
                creditsResponse.data.credits,
                "cr√©dits"
            );
        } catch (error) {
            console.log(
                "‚ÑπÔ∏è Cr√©dits non disponibles (normal pour un nouveau compte)"
            );
        }

        // V√©rifier les v√©hicules
        try {
            const vehiclesResponse = await axios.get(
                `${BASE_URL}/vehicles/my-vehicles`,
                authenticatedRequest({})
            );
            console.log(
                "‚úÖ V√©hicules consult√©s:",
                vehiclesResponse.data.vehicles.length,
                "v√©hicule(s)"
            );
        } catch (error) {
            console.log("‚ÑπÔ∏è Aucun v√©hicule (normal pour un nouveau compte)");
        }
        console.log("");

        // ============ TEST 7: D√âCONNEXION ============
        console.log("üö™ Test 7: D√©connexion de l'utilisateur");

        try {
            const logoutResponse = await axios.post(
                `${BASE_URL}/users/logout`,
                {},
                authenticatedRequest({})
            );
            console.log("‚úÖ D√©connexion r√©ussie:", logoutResponse.data.message);
        } catch (error) {
            // Si l'endpoint logout n'existe pas, on simule en effa√ßant le token
            console.log(
                "‚ÑπÔ∏è Endpoint de d√©connexion non disponible - simulation de la d√©connexion"
            );
            authToken = "";
        }

        // ============ TEST 8: V√âRIFICATION QUE LA D√âCONNEXION A FONCTIONN√â ============
        console.log("\nüîê Test 8: V√©rification de la d√©connexion");

        try {
            // Tenter d'acc√©der au profil avec l'ancien token
            await axios.get(
                `${BASE_URL}/users/profile`,
                authenticatedRequest({})
            );
            console.log(
                "‚ùå ERREUR: L'utilisateur est encore connect√© apr√®s d√©connexion!"
            );
        } catch (error) {
            if (error.response && error.response.status === 401) {
                console.log(
                    "‚úÖ D√©connexion confirm√©e - L'acc√®s au profil est maintenant refus√©"
                );
            } else {
                console.log("‚úÖ D√©connexion confirm√©e - Token invalide");
            }
        }
        console.log("");

        // ============ R√âSUM√â FINAL ============
        console.log("üéâ TOUS LES TESTS UTILISATEUR ONT R√âUSSI!");
        console.log("‚úÖ Cr√©ation de compte");
        console.log("‚úÖ Connexion");
        console.log("‚úÖ Persistance de session");
        console.log("‚úÖ Consultation du profil");
        console.log("‚úÖ Modification du profil");
        console.log("‚úÖ Acc√®s aux donn√©es li√©es");
        console.log("‚úÖ D√©connexion");
        console.log("‚úÖ V√©rification de la d√©connexion");
    } catch (error) {
        console.error("\n‚ùå ERREUR lors des tests utilisateur:");

        if (error.response) {
            console.error(`   Status: ${error.response.status}`);
            console.error(
                `   Message: ${
                    error.response.data.error ||
                    error.response.data.message ||
                    "Erreur inconnue"
                }`
            );
            if (error.response.data.details) {
                console.error(
                    `   D√©tails: ${JSON.stringify(
                        error.response.data.details,
                        null,
                        2
                    )}`
                );
            }
        } else {
            console.error(`   Erreur: ${error.message}`);
        }

        console.log("\nüìã √âtat du test au moment de l'erreur:");
        console.log(
            `   Token d'authentification: ${authToken ? "Pr√©sent" : "Absent"}`
        );
        console.log(`   ID utilisateur: ${userId || "Non d√©fini"}`);
    }
}

// Fonction utilitaire pour nettoyer les donn√©es de test
async function cleanupTestData() {
    console.log("\nüßπ Nettoyage des donn√©es de test...");

    if (!authToken) {
        console.log("‚ÑπÔ∏è Aucun token d'authentification - Nettoyage ignor√©");
        return;
    }

    try {
        // Tenter de supprimer le compte de test
        const deleteResponse = await axios.delete(
            `${BASE_URL}/users/profile`,
            authenticatedRequest({})
        );
        console.log("‚úÖ Compte de test supprim√©:", deleteResponse.data.message);
    } catch (error) {
        console.log(
            "‚ÑπÔ∏è Impossible de supprimer automatiquement le compte de test"
        );
        console.log("   Vous pouvez le supprimer manuellement si n√©cessaire");
    }
}

// Ex√©cuter les tests si ce script est lanc√© directement
if (require.main === module) {
    testUserFunctionality()
        .then(() => {
            console.log("\n‚ú® Tests termin√©s avec succ√®s!");
            process.exit(0);
        })
        .catch((error) => {
            console.error("\nüí• √âchec des tests:", error.message);
            process.exit(1);
        });
}

module.exports = {
    testUserFunctionality,
    cleanupTestData,
};
